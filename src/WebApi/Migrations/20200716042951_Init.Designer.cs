// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftSentre.Shoppingendly.Services.Products.Infrastructure.EntityFramework;

namespace SoftSentre.Shoppingendly.Services.Products.Infrastructure.Migrations
{
    [DbContext(typeof(ProductServiceDbContext))]
    [Migration("20200716042951_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SoftSentre.Shoppingendly.Services.Products.Domain.Aggregates.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryDescription")
                        .HasColumnName("CategoryDescription")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnName("CategoryName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnName("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnName("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories","products");
                });

            modelBuilder.Entity("SoftSentre.Shoppingendly.Services.Products.Domain.Aggregates.Creator", b =>
                {
                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnName("CreatorName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatorRoleId")
                        .HasColumnName("CreatorRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnName("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CreatorId");

                    b.HasIndex("CreatorRoleId");

                    b.ToTable("Creators","products");
                });

            modelBuilder.Entity("SoftSentre.Shoppingendly.Services.Products.Domain.Aggregates.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnName("ProductCreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("ProductName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnName("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Products","products");
                });

            modelBuilder.Entity("SoftSentre.Shoppingendly.Services.Products.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnName("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories","products");
                });

            modelBuilder.Entity("SoftSentre.Shoppingendly.Services.Products.Domain.ValueObjects.CreatorRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CreatorRoles","products");
                });

            modelBuilder.Entity("SoftSentre.Shoppingendly.Services.Products.Domain.Aggregates.Category", b =>
                {
                    b.OwnsOne("SoftSentre.Shoppingendly.Services.Products.Domain.ValueObjects.Picture", "CategoryIcon", b1 =>
                        {
                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsEmpty")
                                .HasColumnName("IsCategoryIconEmpty")
                                .HasColumnType("bit");

                            b1.Property<string>("Name")
                                .HasColumnName("CategoryIconName")
                                .HasColumnType("nvarchar(200)")
                                .HasMaxLength(200);

                            b1.Property<string>("Url")
                                .HasColumnName("CategoryIconUrl")
                                .HasColumnType("nvarchar(500)")
                                .HasMaxLength(500);

                            b1.HasKey("CategoryId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });
                });

            modelBuilder.Entity("SoftSentre.Shoppingendly.Services.Products.Domain.Aggregates.Creator", b =>
                {
                    b.HasOne("SoftSentre.Shoppingendly.Services.Products.Domain.ValueObjects.CreatorRole", "CreatorRole")
                        .WithMany()
                        .HasForeignKey("CreatorRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoftSentre.Shoppingendly.Services.Products.Domain.Aggregates.Product", b =>
                {
                    b.HasOne("SoftSentre.Shoppingendly.Services.Products.Domain.Aggregates.Creator", "Creator")
                        .WithMany("Products")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SoftSentre.Shoppingendly.Services.Products.Domain.ValueObjects.Picture", "ProductPicture", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsEmpty")
                                .HasColumnName("IsProductPictureEmpty")
                                .HasColumnType("bit");

                            b1.Property<string>("Name")
                                .HasColumnName("ProductPictureName")
                                .HasColumnType("nvarchar(200)")
                                .HasMaxLength(200);

                            b1.Property<string>("Url")
                                .HasColumnName("ProductPictureUrl")
                                .HasColumnType("nvarchar(500)")
                                .HasMaxLength(500);

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("SoftSentre.Shoppingendly.Services.Products.Domain.ValueObjects.ProductProducer", "ProductProducer", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnName("ProductProducer")
                                .HasColumnType("nvarchar(50)")
                                .HasMaxLength(50);

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });
                });

            modelBuilder.Entity("SoftSentre.Shoppingendly.Services.Products.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("SoftSentre.Shoppingendly.Services.Products.Domain.Aggregates.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftSentre.Shoppingendly.Services.Products.Domain.Aggregates.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
